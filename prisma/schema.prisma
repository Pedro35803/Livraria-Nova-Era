generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
    id Int @id @default(autoincrement())
    email String @unique
    password String
    @@map("user")
}

model Client {
    code Int @id @default(autoincrement())
    name String
    email_01 String
    email_02 String?
    phone_01 String
    phone_02 String?
    phisical_client PhysicalClient[] 
    legal_client LegalClient[] 
    order Order[]
    @@map(name: "client")
    @@index([code])
}

model PhysicalClient {
    client_code Int @id @default(autoincrement())
    client Client @relation(fields: [client_code], references: [code], onDelete: Cascade)
    cpf String @unique
    rg String @unique
    @@map(name: "physical_client")
    @@index([client_code])
}

model LegalClient {
    client_code Int @id @default(autoincrement())
    client Client @relation(fields: [client_code], references: [code], onDelete: Cascade)
    cnpj String @unique
    @@map(name: "legal_client")
    @@index([client_code])
}

model Employee {
    code Int @id @default(autoincrement())
    name String
    in_person_order InPersonOrder[]
    @@map(name: "employee")
    @@index([code])
}

model InPersonOrder {
    order_number Int @id @default(autoincrement())
    order Order @relation(fields: [order_number], references: [number], onDelete: Cascade)
    employee_code Int
    employee Employee @relation(fields: [employee_code], references: [code], onDelete: Cascade)
    @@map(name: "in_person_order")
    @@index([order_number])
}

model Publisher {
    cnpj String @id
    name String
    book Book[]
    publisher_phone PublisherPhone[]
    publisher_email PublisherEmail[]
    @@map(name: "publisher")
    @@index([cnpj])
}

model PublisherPhone {
    publisher_cnpj String
    phone String
    publisher Publisher @relation(fields: [publisher_cnpj], references: [cnpj], onDelete: Cascade)
    @@id([publisher_cnpj, phone])
    @@map(name: "publisher_phone")
    @@index([publisher_cnpj])
}

model PublisherEmail {
    publisher_cnpj String
    email String
    publisher Publisher @relation(fields: [publisher_cnpj], references: [cnpj], onDelete: Cascade)
    @@id([publisher_cnpj, email])
    @@map(name: "publisher_email")
    @@index([publisher_cnpj])
}

model Book {
    code Int @id @default(autoincrement())
    title String
    release_year String
    publisher_cnpj String
    publisher Publisher @relation(fields: [publisher_cnpj], references: [cnpj], onDelete: SetNull, onUpdate: Cascade)
    book_author BookAuthor[]
    book_category BookCategory[]
    copy Copy[]
    @@map(name: "book")
    @@index([code])
}

model BookAuthor {
    book_code Int
    author String
    book Book @relation(fields: [book_code], references: [code], onDelete: Cascade)
    @@id([book_code, author])
    @@map(name: "book_author")
    @@index([book_code])
}

model BookCategory {
    book_code Int
    category String
    book Book @relation(fields: [book_code], references: [code], onDelete: Cascade)
    @@id([book_code, category])
    @@map(name: "book_category")
    @@index([book_code])
}

model Copy {
    code Int @id @default(autoincrement())
    status String
    book_code Int
    book Book @relation(fields: [book_code], references: [code], onDelete: SetNull)
    order_has_copy OrderHasCopy[]
    @@map(name: "copy")
    @@index([code])
}

model Order {
    number Int @id @default(autoincrement())
    status String
    payment_method String
    client_code Int
    client Client @relation(fields: [client_code], references: [code], onDelete: SetNull)
    online_order OnlineOrder[]
    in_person_order InPersonOrder[]
    order_has_copy OrderHasCopy[]
    @@map(name: "order")
    @@index([number])
}

model OnlineOrder {
    order_number Int @id @default(autoincrement())
    order Order @relation(fields: [order_number], references: [number])
    zip_code String
    state String
    city String
    street String
    number String
    complement String?
    @@map(name: "online_order")
    @@index([order_number])
}

model OrderHasCopy {
    id Int @id @default(autoincrement())
    order_number Int
    copy_code Int
    order Order @relation(fields: [order_number], references: [number])
    copy Copy @relation(fields: [copy_code], references: [code])
    @@unique([copy_code, order_number])
    @@map(name: "order_has_copy")
    @@index([id])
}
