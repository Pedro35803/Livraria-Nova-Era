generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int         @id(map: "pk_user") @default(autoincrement())
  email       String      @unique @db.VarChar(255)
  password    String      @db.VarChar(255)
  name        String?     @db.VarChar(255)
}

model Client {
  code            Int              @id(map: "pk_client") @default(autoincrement())
  name            String           @db.VarChar(255)
  email_01        String           @db.VarChar(255)
  email_02        String?          @db.VarChar(255)
  phone_01        String           @db.Char(11)
  phone_02        String?          @db.Char(11)
  PhysicalClient  PhysicalClient?
  LegalClient     LegalClient?
  Order           Order[]

  @@index([code], map: "index_client")
}

model PhysicalClient {
  client_code     Int     @id(map: "pk_physicalClient") @default(autoincrement())
  rg              String  @unique @db.VarChar(50)
  cpf             String  @unique @db.Char(11)
  client          Client @relation(fields: [client_code], references: [code], onDelete: NoAction, onUpdate: NoAction, map: "fk_physicalClient")

  @@index([client_code], map: "index_physicalClient")

}

model LegalClient {
  client_code     Int     @id(map: "pk_legalClient") @default(autoincrement())
  cnpj            String  @unique @db.Char(14)
  client          Client  @relation(fields: [client_code], references: [code], onDelete: NoAction, onUpdate: NoAction, map: "fk_legalClient")

  @@index([client_code], map: "index_legalClient")
}

model Publisher {
  cnpj            String            @id(map: "pk_publisher") @db.Char(14)
  name            String            @db.VarChar(255)
  PublisherEmail  PublisherEmail[]
  Book            Book[]
  PublisherPhone  PublisherPhone[]

  @@index([cnpj], map: "index_publisher")
}

model PublisherEmail {
  cnpj_publisher  String  @db.Char(14)
  email           String  @db.VarChar(255)
  publisher       Publisher @relation(fields: [cnpj_publisher], references: [cnpj], onDelete: NoAction, onUpdate: NoAction, map: "fk_publisherEmail")

  @@id([email, cnpj_publisher], map: "pk_publisherEmail")
  @@index([cnpj_publisher], map: "index_publisherEmail")
}

model PublisherPhone {
  cnpj_publisher  String  @db.Char(14)
  phone           String  @db.Char(11)
  publisher       Publisher @relation(fields: [cnpj_publisher], references: [cnpj], onDelete: NoAction, onUpdate: NoAction, map: "fk_publisherPhone")

  @@id([phone, cnpj_publisher], map: "pk_publisherPhone")
  @@index([cnpj_publisher], map: "index_publisherPhone")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model Employee {
  code              Int                @id(map: "pk_employee") @default(autoincrement())
  name              String             @db.VarChar(255)
  salary            Float
  hiring_year       DateTime           @db.Date
  PhysicalOrder     PhysicalOrder[]

  @@index([code], map: "index_employee")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model Book {
  code                Int              @id(map: "pk_book") @default(autoincrement())
  title               String           @db.VarChar(255)
  price               Float
  release_year        String           @db.Char(4)
  cnpj_publisher      String?          @db.Char(14)
  Copy                Copy[]
  Publisher           Publisher?       @relation(fields: [cnpj_publisher], references: [cnpj], onDelete: NoAction, onUpdate: NoAction, map: "fk_book")
  BookAuthor          BookAuthor[]
  BookCategory        BookCategory[]

  @@index([code], map: "index_book")
}

model BookAuthor {
  code_book  Int
  author     String @db.VarChar(255)
  book       Book   @relation(fields: [code_book], references: [code], onDelete: NoAction, onUpdate: NoAction, map: "fk_bookAuthor")

  @@id([author, code_book], map: "pk_bookAuthor")
  @@index([code_book], map: "index_bookAuthor")
}

model BookCategory {
  code_book  Int
  category   String @db.VarChar(50)
  book       Book   @relation(fields: [code_book], references: [code], onDelete: NoAction, onUpdate: NoAction, map: "fk_bookCategory")

  @@id([category, code_book], map: "pk_bookCategory")
  @@index([code_book], map: "index_bookCategory")
}

model Copy {
  code            Int                 @id(map: "pk_copy") @default(autoincrement())
  status          String              @db.VarChar(50)
  code_book       Int?
  book            Book?               @relation(fields: [code_book], references: [code], onDelete: NoAction, onUpdate: NoAction, map: "fk_copy")
  OrderHasCopy    OrderHasCopy[]

  @@index([code], map: "index_copy")
}

model Order {
  number              Int                 @id(map: "pk_order") @default(autoincrement())
  status              String              @db.VarChar(50)
  value               Float
  date                DateTime            @db.Timestamp(6)
  payment_method      String              @db.VarChar(50)
  client_code         Int?
  client              Client?            @relation(fields: [client_code], references: [code], onDelete: NoAction, onUpdate: NoAction, map: "fk_order")
  OrderOnline         OrderOnline?
  PhysicalOrder       PhysicalOrder?
  OrderHasCopy        OrderHasCopy[]

  @@index([number], map: "index_order")
}

model OrderOnline {
  order_number   Int     @id(map: "pk_orderOnline")
  zip            String  @db.VarChar(50)
  state          String  @db.VarChar(255)
  city           String  @db.VarChar(255)
  street         String  @db.VarChar(255)
  number         String  @db.VarChar(15)
  length         String? @db.VarChar(255)
  order          Order  @relation(fields: [order_number], references: [number], onDelete: NoAction, onUpdate: NoAction, map: "fk_orderOnline")

  @@index([order_number], map: "index_orderOnline")
}

model PhysicalOrder {
  order_number         Int          @id(map: "pk_physicalOrder")
  code_employee        Int?
  order                Order        @relation(fields: [order_number], references: [number], onDelete: NoAction, onUpdate: NoAction, map: "fk_01_physicalOrder")
  Employee             Employee?    @relation(fields: [code_employee], references: [code], onDelete: NoAction, onUpdate: NoAction, map: "fk_02_physicalOrder")

  @@index([order_number], map: "index_physicalOrder")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model OrderHasCopy {
  id                Int       @id(map: "pk_orderHasCopy") @default(autoincrement())
  price             Float
  order_number      Int?
  code_copy         Int?
  order             Order?   @relation(fields: [order_number], references: [number], onDelete: NoAction, onUpdate: NoAction, map: "fk_01_orderHasCopy")
  Copy              Copy?    @relation(fields: [code_copy], references: [code], onDelete: NoAction, onUpdate: NoAction, map: "fk_02_orderHasCopy")

  @@index([id], map: "index_orderHasCopy")
}
